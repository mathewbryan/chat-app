{"version":3,"sources":["pages/Home.js","services/firebase.js","components/logOut.js","pages/Chat.js","helpers/auth.js","pages/Signup.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","to","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","auth","db","database","LogOut","id","currentUser","onClick","signOut","Chat","props","state","user","chats","content","readError","writeError","handleChange","bind","handleSubmit","this","setState","ref","on","snapshot","forEach","snap","push","val","error","message","event","target","value","preventDefault","timestamp","Date","now","uid","userName","email","map","key","onSubmit","onChange","type","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","SignUp","password","googleSignIn","name","createUserWithEmailAndPassword","placeholder","Login","signInWithEmailAndPassword","autoComplete","PrivateRoute","component","authenticated","rest","render","pathname","from","location","PublicRoute","App","loading","onAuthStateChanged","exact","path","Home","Signup","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.63f46396.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\n\nimport { Link } from 'react-router-dom';\n\nexport default class HomePage extends Component {\n  render() {\n    return (\n      <div className=\"home\">\n        \n        <section>\n          <div className=\"jumbotron jumbotron-fluid py-5\">\n            <div className=\"container text-center py-5\">\n              <h1 className=\"display-4\">Welcome to Sprechen</h1>\n              <p className=\"lead\">A great place to share your thoughts with friends</p>\n              <div className=\"mt-4\">\n                <Link className=\"btn btn-primary px-5 mr-3\" to=\"/signup\">Create New Account</Link>\n                <Link className=\"btn px-5\" to=\"/login\">Login to Your Account</Link>\n              </div>\n            </div>\n          </div>\n        </section>\n   \n      </div>\n    )\n  }\n}","import firebase from 'firebase/app'\nimport \"firebase/auth\";\nimport \"firebase/database\"\n\nconst config = {\n    apiKey: \"AIzaSyA60htlAtP6hDXjnlhppCeHzFO-BPwbF7o\",\n    authDomain: \"sprechen-9cc75.firebaseapp.com\",\n    databaseURL: \"https://sprechen-9cc75.firebaseio.com\"\n  };\n\n  \n  firebase.initializeApp(config);\n  \n  export const auth = firebase.auth;\n  export const db = firebase.database();\n\n    ","import React, { Component } from 'react';\nimport {auth} from \"../services/firebase\"\nimport {Link} from \"react-router-dom\"\n\nexport default class LogOut extends Component {\n\n\n    render(){\n        return(\n            <div className=\"\" id=\"\">\n            {auth().currentUser\n              ? <div className=\"navbar-nav\">\n                <Link className=\"\" to=\"/chat\">Profile</Link>\n                <button className=\"btn btn-primary mr-3\" onClick={() => auth().signOut()}>Logout</button>\n              </div>\n              : <div className=\"navbar-nav\">\n                <Link className=\"nav-item nav-link mr-3\" to=\"/login\">Sign In</Link>\n                <Link className=\"nav-item nav-link mr-3\" to=\"/signup\">Sign Up</Link>\n              </div>}\n          </div>\n            \n        )\n    }\n\n}","import React, {Component} from \"react\"\nimport {auth} from \"../services/firebase\"\nimport {db} from \"../services/firebase\"\nimport LogOut from \"../components/logOut\"\nimport firebase from 'firebase/app'\n\nexport default class Chat extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            user: auth().currentUser,\n            chats: [],\n            content: '',\n            readError: null,\n            writeError: null,\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState({ readError: null })\n        try {\n          db.ref(\"chats\").on(\"value\", snapshot => {\n            let chats = [];\n            snapshot.forEach((snap) => {\n              chats.push(snap.val());\n            });\n            this.setState({ chats });\n          });\n        } catch (error) {\n          this.setState({ readError: error.message });\n        }\n      }\n    handleChange(event) {\n        this.setState({\n          content: event.target.value\n        });\n      }\n    \n      async handleSubmit(event) {\n        event.preventDefault();\n        this.setState({ writeError: null });\n        try {\n          await db.ref(\"chats\").push({\n            content: this.state.content,\n            timestamp: Date.now(),\n            uid: this.state.user.uid,\n            userName: this.state.user.email\n          });\n          this.setState({ content: '' });\n        } catch (error) {\n          this.setState({ writeError: error.message });\n        }\n      }  \n\n    render(){\n        return (\n            <div>\n              <div className=\"chats\">\n                  {this.state.chats.content}\n                {this.state.chats.map(chats => {\n                  return <p key={chats.timestamp}> {chats.userName} -- {chats.content}</p>\n                })}\n              </div>\n              \n              <form onSubmit={this.handleSubmit}>\n                <input onChange={this.handleChange} value={this.state.content}></input>\n                {this.state.error ? <p>{this.state.writeError}</p> : null}\n                <button type=\"submit\">Send</button>\n              </form>\n              <div>\n                Logged in as: <strong>{this.state.user.email}</strong>\n              </div>\n              <LogOut/>\n            </div>\n          );\n    }\n}","import { auth } from \"../services/firebase\";\n\nexport function signup(email, password) {\n    return auth().createUserWithEmailAndPassword(email, password)\n  }\n  \nexport function signin(email, password) {\n    return auth().signInWithEmailAndPassword(email, password)\n  }\n\n  export function signInWithGoogle() {\n    const provider = new auth.GoogleAuthProvider();\n    return auth().signInWithPopup(provider);\n  }","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { signup, signInWithGoogle } from '../helpers/auth';\n\nexport default class SignUp extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            error: null,\n            email: '',\n            password: '',\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.googleSignIn = this.googleSignIn.bind(this)\n    }\n\n    //updates state when value is entered into the form\n    handleChange(event){\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n    //submit email and password from form\n    async handleSubmit(event){\n        event.preventDefault()\n        this.setState({ error: '' })\n        try{\n            await signup(this.state.email, this.state.password)\n        } catch(error) {\n            this.setState({error: error.message})\n        }\n    }\n    //use google account to sign up\n    async googleSignIn() {\n        try{\n            await signInWithGoogle()\n        } catch (error){\n            this.setState({ error: error.message })\n        }\n    }\n\n    render(){\n        return(\n            <div>\n            <form onSubmit={this.handleSubmit}>\n              <h1>\n                Sign Up to\n              <Link to=\"/\"> Sprechen</Link>\n              </h1>\n              <p>Fill in the form below to create an account.</p>\n              <div>\n                <input placeholder=\"Email\" name=\"email\" type=\"email\" onChange={this.handleChange} value={this.state.email}></input>\n              </div>\n              <div>\n                <input placeholder=\"Password\" name=\"password\" onChange={this.handleChange} value={this.state.password} type=\"password\"></input>\n              </div>\n              <div>\n                {this.state.error ? <p>{this.state.error}</p> : null}\n                <button type=\"submit\">Sign up</button>\n                <p>Or</p>\n                <button onClick={this.googleSignIn} type=\"button\">\n                Sign up with Google\n                </button>\n              </div>\n              <hr></hr>\n              <p>Already have an account? <Link to=\"/login\">Login</Link></p>\n            </form>\n          </div>\n        )\n    }\n}","import React, {Component} from \"react\"\nimport {Link} from \"react-router-dom\"\nimport { signin, signInWithGoogle, signInWithGitHub } from \"../helpers/auth\"\n\nexport default class Login extends Component {\n    constructor(props){\n        super(props)\n            this.state = {\n                error: null,\n                email: \"\",\n                password: \"\", \n            }\n            this.handleChange = this.handleChange.bind(this)\n            this.handleSubmit = this.handleSubmit.bind(this)\n        }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    async handleSubmit(event){\n        event.preventDefault()\n        this.setState({ error: \"\"})\n        try {\n            await signin(this.state.email, this.state.password)\n        } catch (error){\n            this.setState({error: error.message})\n        }\n    }\n    render(){\n        return(\n            <div>\n            <form\n              autoComplete=\"off\"\n              onSubmit={this.handleSubmit}\n            >\n              <h1>\n                Login to    \n                <Link to=\"/ \">\n                    Chat\n                </Link>\n              </h1>\n              <p>\n                Fill in the form below to login to your account.\n              </p>\n              <div>\n                <input\n                  placeholder=\"Email\"\n                  name=\"email\"\n                  type=\"email\"\n                  onChange={this.handleChange}\n                  value={this.state.email}\n                />\n              </div>\n              <div>\n                <input\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  onChange={this.handleChange}\n                  value={this.state.password}\n                  type=\"password\"\n                />\n              </div>\n              <div>\n                {this.state.error ? (\n                  <p>{this.state.error}</p>\n                ) : null}\n                <button type=\"submit\">Login</button>\n              </div>\n              <hr />\n              <p>\n                Don't have an account? <Link to=\"/signup\">Sign up</Link>\n              </p>\n            </form>\n          </div>\n        )\n    }\n    }\n","import React, { Component } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport Home from './pages/Home';\nimport Chat from './pages/Chat';\nimport Signup from './pages/Signup';\nimport Login from './pages/Login';\nimport { auth } from './services/firebase';\n\n\nfunction PrivateRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === true\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n\nfunction PublicRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === false\n        ? <Component {...props} />\n        : <Redirect to='/chat' />}\n    />\n  )\n}\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      authenticated: false,\n      loading: true,\n    }\n  }\n\n  componentDidMount() {\n    auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({\n          authenticated: true,\n          loading: false,\n        });\n      } else {\n        this.setState({\n          authenticated: false,\n          loading: false,\n        });\n      }\n    })\n  }\n \n  render() {\n    return this.state.loading === true ? <h2>Loading...</h2> : (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home}></Route>\n          <PrivateRoute path=\"/chat\" authenticated={this.state.authenticated} component={Chat}></PrivateRoute>\n          <PublicRoute path=\"/signup\" authenticated={this.state.authenticated} component={Signup}></PublicRoute>\n          <PublicRoute path=\"/login\" authenticated={this.state.authenticated} component={Login}></PublicRoute>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}